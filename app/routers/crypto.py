from fastapi import APIRouter, HTTPException, Depends, status, Query
from app.routers.deps import authenticate_user
from app.db import crypto
from typing import List, Optional, Tuple

crypto_router = APIRouter(prefix="/crypto")


def exception_dispatcher(e: Exception) -> HTTPException:
    if type(e) == crypto.CryptoControllerException:
        return HTTPException(status_code=503, detail=f"Problem with keys: {e}")
    elif type(e) == IndexError:
        return HTTPException(
            status_code=403, detail=f"Problem with index: {e}"
        )
    return HTTPException(status_code=403, detail=f"User error: {e}")


@crypto_router.get("/one-time-key")
def get_otks(
    used: bool = True, data=Depends(authenticate_user)
) -> List[Tuple[int, str]]:
    login, db = data
    otks = crypto.get_user_otks(db, login, key_used=used)

    if otks is None:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=("Could not find any keys for " f"user {login}"),
        )
    return otks


@crypto_router.post("/one-time-key")
def assign_new_otks(login: str, limit: int) -> dict:
    ...


@crypto_router.post("/generates_otks")
def generate_new_otks(
    login: str,
    limit: Optional[int] = Query(None, ge=0, le=100),
    data=Depends(authenticate_user),
) -> dict:
    """
    Deletes all used up keys and replaces them
    with new ones, generated by the api.
    Can increase or decrease the number of keys,
    depending on the limit value
    """
    return {}
