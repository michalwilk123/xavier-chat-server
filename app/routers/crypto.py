from app.models.crypto import OtkCollection
from fastapi import APIRouter, HTTPException, Depends, status, Query
from app.routers.deps import authenticate_user
from app.db import crypto
from typing import List, Optional, Tuple
from app.utils import crypto as crypto_utils

crypto_router = APIRouter(prefix="/crypto")


async def exception_dispatcher(e: Exception) -> HTTPException:
    if type(e) == crypto.CryptoControllerException:
        return HTTPException(status_code=503, detail=f"Problem with keys: {e}")
    elif type(e) == IndexError:
        return HTTPException(status_code=403, detail=f"Problem with index: {e}")
    return HTTPException(status_code=403, detail=f"User error: {e}")


@crypto_router.get("/one-time-keys")
async def get_otks(
    used: bool = None, data=Depends(authenticate_user)
) -> List[Tuple[int, str]]:
    login, db = data
    otks = crypto.get_user_otks(db, login, key_used=used)

    if otks is None:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=(f"Could not find any keys for user {login}"),
        )
    return otks


@crypto_router.post("/one-time-keys")
async def assign_new_otks(
    otk_collection: OtkCollection, data=Depends(authenticate_user)
) -> str:
    login, db = data
    collection_norm = {
        el["index"]: el["value"] for el in otk_collection.dict()["collection"]
    }

    if not crypto.set_otk_and_replace(db, login, collection_norm):
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=(f"The user: {login}, was lost " "thoughout the request"),
        )

    return "OK"


@crypto_router.post("/generate-otks")
async def generate_new_otks(
    limit: Optional[int] = Query(None, ge=0, le=100),
    data=Depends(authenticate_user),
) -> str:
    login, db = data
    """
    Deletes all used up keys and replaces them
    with new ones, generated by the api.
    Can increase or decrease the number of keys,
    depending on the limit value
    """
    otks = crypto.get_user_otks(db, login, key_used=True)

    if otks is None:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Could not find any keys for " f"user {login}",
        )

    crypto.delete_used_otk(db, login)

    if limit is None:
        limit = len(otks)

    new_otks = crypto_utils.generate_otks(limit)

    if not crypto.set_one_time_keys(db, login, {i: v for i, v in enumerate(new_otks)}):
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=(f"The user: {login}, was lost " "thoughout the request"),
        )
    return "OK"
